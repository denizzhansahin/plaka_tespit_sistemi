# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'form.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from datetime import datetime
import pandas as pd
import xlwt
import time

import sqlite3 as sql
db = sql.connect("db.sqlite")
imlec = db.cursor()

class Ui_giris_cikis_tablo(object):
    def setupUi(self, giris_cikis_tablo):
        giris_cikis_tablo.setObjectName("giris_cikis_tablo")
        giris_cikis_tablo.resize(1500, 900)
        giris_cikis_tablo.setMinimumSize(QtCore.QSize(1500, 900))
        giris_cikis_tablo.setMaximumSize(QtCore.QSize(1500, 900))
        self.centralwidget = QtWidgets.QWidget(giris_cikis_tablo)
        self.centralwidget.setObjectName("centralwidget")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(0, 30, 1491, 831))
        self.tabWidget.setObjectName("tabWidget")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.scrollArea = QtWidgets.QScrollArea(self.tab)
        self.scrollArea.setGeometry(QtCore.QRect(0, 0, 1481, 771))
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 1479, 769))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.tableWidget = QtWidgets.QTableWidget(self.scrollAreaWidgetContents)
        self.tableWidget.setGeometry(QtCore.QRect(0, 30, 1471, 731))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(7)
        self.tableWidget.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(6, item)
        self.tableWidget.horizontalHeader().setDefaultSectionSize(200)
        self.arac_export = QtWidgets.QPushButton(self.scrollAreaWidgetContents)
        self.arac_export.setGeometry(QtCore.QRect(0, 0, 88, 27))
        self.arac_export.setObjectName("arac_export")
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.tabWidget.addTab(self.tab, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.scrollArea_2 = QtWidgets.QScrollArea(self.tab_2)
        self.scrollArea_2.setGeometry(QtCore.QRect(0, 0, 1481, 771))
        self.scrollArea_2.setWidgetResizable(True)
        self.scrollArea_2.setObjectName("scrollArea_2")
        self.scrollAreaWidgetContents_2 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_2.setGeometry(QtCore.QRect(0, 0, 1479, 769))
        self.scrollAreaWidgetContents_2.setObjectName("scrollAreaWidgetContents_2")
        self.tableWidget_2 = QtWidgets.QTableWidget(self.scrollAreaWidgetContents_2)
        self.tableWidget_2.setGeometry(QtCore.QRect(0, 30, 1471, 731))
        self.tableWidget_2.setObjectName("tableWidget_2")
        self.tableWidget_2.setColumnCount(8)
        self.tableWidget_2.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(6, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(7, item)
        self.tableWidget_2.horizontalHeader().setDefaultSectionSize(150)
        self.kullanici_export = QtWidgets.QPushButton(self.scrollAreaWidgetContents_2)
        self.kullanici_export.setGeometry(QtCore.QRect(0, 0, 88, 27))
        self.kullanici_export.setObjectName("kullanici_export")
        self.scrollArea_2.setWidget(self.scrollAreaWidgetContents_2)
        self.tabWidget.addTab(self.tab_2, "")
        self.tab_3 = QtWidgets.QWidget()
        self.tab_3.setObjectName("tab_3")
        self.scrollArea_3 = QtWidgets.QScrollArea(self.tab_3)
        self.scrollArea_3.setGeometry(QtCore.QRect(0, 0, 1481, 771))
        self.scrollArea_3.setWidgetResizable(True)
        self.scrollArea_3.setObjectName("scrollArea_3")
        self.scrollAreaWidgetContents_3 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_3.setGeometry(QtCore.QRect(0, 0, 1479, 769))
        self.scrollAreaWidgetContents_3.setObjectName("scrollAreaWidgetContents_3")
        self.tableWidget_3 = QtWidgets.QTableWidget(self.scrollAreaWidgetContents_3)
        self.tableWidget_3.setGeometry(QtCore.QRect(0, 30, 1481, 731))
        self.tableWidget_3.setObjectName("tableWidget_3")
        self.tableWidget_3.setColumnCount(9)
        self.tableWidget_3.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_3.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_3.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_3.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_3.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_3.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_3.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_3.setHorizontalHeaderItem(6, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_3.setHorizontalHeaderItem(7, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_3.setHorizontalHeaderItem(8, item)
        self.tableWidget_3.horizontalHeader().setDefaultSectionSize(165)
        self.gunluk_export = QtWidgets.QPushButton(self.scrollAreaWidgetContents_3)
        self.gunluk_export.setGeometry(QtCore.QRect(0, 0, 88, 27))
        self.gunluk_export.setObjectName("gunluk_export")
        self.scrollArea_3.setWidget(self.scrollAreaWidgetContents_3)
        self.tabWidget.addTab(self.tab_3, "")
        self.tab_4 = QtWidgets.QWidget()
        self.tab_4.setObjectName("tab_4")
        self.scrollArea_4 = QtWidgets.QScrollArea(self.tab_4)
        self.scrollArea_4.setGeometry(QtCore.QRect(0, 0, 1481, 771))
        self.scrollArea_4.setWidgetResizable(True)
        self.scrollArea_4.setObjectName("scrollArea_4")
        self.scrollAreaWidgetContents_4 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_4.setGeometry(QtCore.QRect(0, 0, 1479, 769))
        self.scrollAreaWidgetContents_4.setObjectName("scrollAreaWidgetContents_4")
        self.tableWidget_4 = QtWidgets.QTableWidget(self.scrollAreaWidgetContents_4)
        self.tableWidget_4.setGeometry(QtCore.QRect(0, 30, 1471, 731))
        self.tableWidget_4.setObjectName("tableWidget_4")
        self.tableWidget_4.setColumnCount(8)
        self.tableWidget_4.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_4.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_4.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_4.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_4.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_4.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_4.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_4.setHorizontalHeaderItem(6, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_4.setHorizontalHeaderItem(7, item)
        self.tableWidget_4.horizontalHeader().setDefaultSectionSize(180)
        self.yetkisiz_islem = QtWidgets.QPushButton(self.scrollAreaWidgetContents_4)
        self.yetkisiz_islem.setGeometry(QtCore.QRect(0, 0, 88, 27))
        self.yetkisiz_islem.setObjectName("yetkisiz_islem")
        self.scrollArea_4.setWidget(self.scrollAreaWidgetContents_4)
        self.tabWidget.addTab(self.tab_4, "")
        self.tab_5 = QtWidgets.QWidget()
        self.tab_5.setObjectName("tab_5")
        self.scrollArea_5 = QtWidgets.QScrollArea(self.tab_5)
        self.scrollArea_5.setGeometry(QtCore.QRect(0, 0, 1091, 771))
        self.scrollArea_5.setWidgetResizable(True)
        self.scrollArea_5.setObjectName("scrollArea_5")
        self.scrollAreaWidgetContents_5 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_5.setGeometry(QtCore.QRect(0, 0, 1089, 769))
        self.scrollAreaWidgetContents_5.setObjectName("scrollAreaWidgetContents_5")
        self.tableWidget_5 = QtWidgets.QTableWidget(self.scrollAreaWidgetContents_5)
        self.tableWidget_5.setGeometry(QtCore.QRect(0, 0, 1081, 761))
        self.tableWidget_5.setObjectName("tableWidget_5")
        self.tableWidget_5.setColumnCount(7)
        self.tableWidget_5.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_5.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_5.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_5.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_5.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_5.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_5.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_5.setHorizontalHeaderItem(6, item)
        self.tableWidget_5.horizontalHeader().setDefaultSectionSize(150)
        self.scrollArea_5.setWidget(self.scrollAreaWidgetContents_5)
        self.verticalLayoutWidget = QtWidgets.QWidget(self.tab_5)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(1110, 40, 361, 91))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.label = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.label.setObjectName("label")
        self.verticalLayout.addWidget(self.label)
        self.kullanici_ozel_id = QtWidgets.QLineEdit(self.verticalLayoutWidget)
        self.kullanici_ozel_id.setObjectName("kullanici_ozel_id")
        self.verticalLayout.addWidget(self.kullanici_ozel_id)
        self.kullanici_ozel_buton = QtWidgets.QPushButton(self.tab_5)
        self.kullanici_ozel_buton.setGeometry(QtCore.QRect(1110, 350, 351, 71))
        self.kullanici_ozel_buton.setObjectName("kullanici_ozel_buton")
        self.label_4 = QtWidgets.QLabel(self.tab_5)
        self.label_4.setGeometry(QtCore.QRect(1120, 580, 321, 19))
        self.label_4.setObjectName("label_4")
        self.veri_export_kullanici = QtWidgets.QPushButton(self.tab_5)
        self.veri_export_kullanici.setGeometry(QtCore.QRect(1110, 430, 351, 71))
        self.veri_export_kullanici.setObjectName("veri_export_kullanici")
        self.tabWidget.addTab(self.tab_5, "")
        self.tab_6 = QtWidgets.QWidget()
        self.tab_6.setObjectName("tab_6")
        self.scrollArea_6 = QtWidgets.QScrollArea(self.tab_6)
        self.scrollArea_6.setGeometry(QtCore.QRect(0, 0, 1091, 771))
        self.scrollArea_6.setWidgetResizable(True)
        self.scrollArea_6.setObjectName("scrollArea_6")
        self.scrollAreaWidgetContents_6 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_6.setGeometry(QtCore.QRect(0, 0, 1089, 769))
        self.scrollAreaWidgetContents_6.setObjectName("scrollAreaWidgetContents_6")
        self.tableWidget_6 = QtWidgets.QTableWidget(self.scrollAreaWidgetContents_6)
        self.tableWidget_6.setGeometry(QtCore.QRect(0, 0, 1081, 761))
        self.tableWidget_6.setObjectName("tableWidget_6")
        self.tableWidget_6.setColumnCount(7)
        self.tableWidget_6.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_6.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_6.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_6.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_6.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_6.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_6.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_6.setHorizontalHeaderItem(6, item)
        self.tableWidget_6.horizontalHeader().setDefaultSectionSize(150)
        self.scrollArea_6.setWidget(self.scrollAreaWidgetContents_6)
        self.plaka_ozel_buton = QtWidgets.QPushButton(self.tab_6)
        self.plaka_ozel_buton.setGeometry(QtCore.QRect(1110, 370, 351, 71))
        self.plaka_ozel_buton.setObjectName("plaka_ozel_buton")
        self.verticalLayoutWidget_2 = QtWidgets.QWidget(self.tab_6)
        self.verticalLayoutWidget_2.setGeometry(QtCore.QRect(1110, 40, 361, 91))
        self.verticalLayoutWidget_2.setObjectName("verticalLayoutWidget_2")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_2)
        self.verticalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.label_8 = QtWidgets.QLabel(self.verticalLayoutWidget_2)
        self.label_8.setObjectName("label_8")
        self.verticalLayout_3.addWidget(self.label_8)
        self.plaka_ozel = QtWidgets.QLineEdit(self.verticalLayoutWidget_2)
        self.plaka_ozel.setObjectName("plaka_ozel")
        self.verticalLayout_3.addWidget(self.plaka_ozel)
        self.label_11 = QtWidgets.QLabel(self.tab_6)
        self.label_11.setGeometry(QtCore.QRect(1120, 580, 321, 121))
        self.label_11.setObjectName("label_11")
        self.veri_export_arac = QtWidgets.QPushButton(self.tab_6)
        self.veri_export_arac.setGeometry(QtCore.QRect(1110, 460, 351, 71))
        self.veri_export_arac.setObjectName("veri_export_arac")
        self.tabWidget.addTab(self.tab_6, "")
        self.tab_7 = QtWidgets.QWidget()
        self.tab_7.setObjectName("tab_7")
        self.scrollArea_7 = QtWidgets.QScrollArea(self.tab_7)
        self.scrollArea_7.setGeometry(QtCore.QRect(0, 0, 1091, 771))
        self.scrollArea_7.setWidgetResizable(True)
        self.scrollArea_7.setObjectName("scrollArea_7")
        self.scrollAreaWidgetContents_7 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_7.setGeometry(QtCore.QRect(0, 0, 1089, 769))
        self.scrollAreaWidgetContents_7.setObjectName("scrollAreaWidgetContents_7")
        self.tableWidget_7 = QtWidgets.QTableWidget(self.scrollAreaWidgetContents_7)
        self.tableWidget_7.setGeometry(QtCore.QRect(0, 0, 1081, 771))
        self.tableWidget_7.setObjectName("tableWidget_7")
        self.tableWidget_7.setColumnCount(5)
        self.tableWidget_7.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_7.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_7.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_7.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_7.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_7.setHorizontalHeaderItem(4, item)
        self.tableWidget_7.horizontalHeader().setDefaultSectionSize(180)
        self.scrollArea_7.setWidget(self.scrollAreaWidgetContents_7)
        self.verticalLayoutWidget_3 = QtWidgets.QWidget(self.tab_7)
        self.verticalLayoutWidget_3.setGeometry(QtCore.QRect(1110, 40, 361, 351))
        self.verticalLayoutWidget_3.setObjectName("verticalLayoutWidget_3")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_3)
        self.verticalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.label_10 = QtWidgets.QLabel(self.verticalLayoutWidget_3)
        self.label_10.setObjectName("label_10")
        self.verticalLayout_5.addWidget(self.label_10)
        self.zaman_ay_ozel = QtWidgets.QLineEdit(self.verticalLayoutWidget_3)
        self.zaman_ay_ozel.setObjectName("zaman_ay_ozel")
        self.verticalLayout_5.addWidget(self.zaman_ay_ozel)
        self.label_12 = QtWidgets.QLabel(self.verticalLayoutWidget_3)
        self.label_12.setObjectName("label_12")
        self.verticalLayout_5.addWidget(self.label_12)
        self.zaman_gun_ozel = QtWidgets.QLineEdit(self.verticalLayoutWidget_3)
        self.zaman_gun_ozel.setObjectName("zaman_gun_ozel")
        self.verticalLayout_5.addWidget(self.zaman_gun_ozel)
        self.label_13 = QtWidgets.QLabel(self.verticalLayoutWidget_3)
        self.label_13.setObjectName("label_13")
        self.verticalLayout_5.addWidget(self.label_13)
        self.zaman_saat_ozel = QtWidgets.QLineEdit(self.verticalLayoutWidget_3)
        self.zaman_saat_ozel.setObjectName("zaman_saat_ozel")
        self.verticalLayout_5.addWidget(self.zaman_saat_ozel)
        self.label_14 = QtWidgets.QLabel(self.verticalLayoutWidget_3)
        self.label_14.setObjectName("label_14")
        self.verticalLayout_5.addWidget(self.label_14)
        self.zaman_dakika_ozel = QtWidgets.QLineEdit(self.verticalLayoutWidget_3)
        self.zaman_dakika_ozel.setObjectName("zaman_dakika_ozel")
        self.verticalLayout_5.addWidget(self.zaman_dakika_ozel)
        self.zaman_buton_ozel = QtWidgets.QPushButton(self.tab_7)
        self.zaman_buton_ozel.setGeometry(QtCore.QRect(1110, 440, 351, 71))
        self.zaman_buton_ozel.setObjectName("zaman_buton_ozel")
        self.label_2 = QtWidgets.QLabel(self.tab_7)
        self.label_2.setGeometry(QtCore.QRect(1110, 630, 351, 131))
        self.label_2.setObjectName("label_2")
        self.veri_export_zaman = QtWidgets.QPushButton(self.tab_7)
        self.veri_export_zaman.setGeometry(QtCore.QRect(1110, 540, 351, 71))
        self.veri_export_zaman.setObjectName("veri_export_zaman")
        self.tabWidget.addTab(self.tab_7, "")
        giris_cikis_tablo.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(giris_cikis_tablo)
        self.statusbar.setObjectName("statusbar")
        giris_cikis_tablo.setStatusBar(self.statusbar)

        self.retranslateUi(giris_cikis_tablo)
        self.tabWidget.setCurrentIndex(3)
        QtCore.QMetaObject.connectSlotsByName(giris_cikis_tablo)

    def retranslateUi(self, giris_cikis_tablo):
        _translate = QtCore.QCoreApplication.translate
        giris_cikis_tablo.setWindowTitle(_translate("giris_cikis_tablo", "Yönetici Girş/Çıkış Tablosu"))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("giris_cikis_tablo", "Plaka Bilgisi"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("giris_cikis_tablo", " Dosya Adı"))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("giris_cikis_tablo", "İşlem Türü"))
        item = self.tableWidget.horizontalHeaderItem(3)
        item.setText(_translate("giris_cikis_tablo", "İşlem Ay"))
        item = self.tableWidget.horizontalHeaderItem(4)
        item.setText(_translate("giris_cikis_tablo", "İşlem Günü"))
        item = self.tableWidget.horizontalHeaderItem(5)
        item.setText(_translate("giris_cikis_tablo", "İşlem Saati"))
        item = self.tableWidget.horizontalHeaderItem(6)
        item.setText(_translate("giris_cikis_tablo", "İşlem Dakikası"))
        self.arac_export.setText(_translate("giris_cikis_tablo", "Dışarı Aktar"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("giris_cikis_tablo", "Araç Giriş/Çıkış Tablosu"))
        item = self.tableWidget_2.horizontalHeaderItem(0)
        item.setText(_translate("giris_cikis_tablo", "Kullanıcı ID"))
        item = self.tableWidget_2.horizontalHeaderItem(1)
        item.setText(_translate("giris_cikis_tablo", "Plaka Bilgisi"))
        item = self.tableWidget_2.horizontalHeaderItem(2)
        item.setText(_translate("giris_cikis_tablo", "Dosya Adı"))
        item = self.tableWidget_2.horizontalHeaderItem(3)
        item.setText(_translate("giris_cikis_tablo", "İşlem Türü"))
        item = self.tableWidget_2.horizontalHeaderItem(4)
        item.setText(_translate("giris_cikis_tablo", "İşlem Ay"))
        item = self.tableWidget_2.horizontalHeaderItem(5)
        item.setText(_translate("giris_cikis_tablo", "İşlem Günü"))
        item = self.tableWidget_2.horizontalHeaderItem(6)
        item.setText(_translate("giris_cikis_tablo", "İşlem Saati"))
        item = self.tableWidget_2.horizontalHeaderItem(7)
        item.setText(_translate("giris_cikis_tablo", "İşlem Dakikası"))
        self.kullanici_export.setText(_translate("giris_cikis_tablo", "Dışarı Aktar"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("giris_cikis_tablo", "Kullanıcı Giriş/Çıkış Tablosu"))
        item = self.tableWidget_3.horizontalHeaderItem(0)
        item.setText(_translate("giris_cikis_tablo", "Kullanıcı ID"))
        item = self.tableWidget_3.horizontalHeaderItem(1)
        item.setText(_translate("giris_cikis_tablo", "Plaka Bilgisi"))
        item = self.tableWidget_3.horizontalHeaderItem(2)
        item.setText(_translate("giris_cikis_tablo", "Dosya Adı"))
        item = self.tableWidget_3.horizontalHeaderItem(3)
        item.setText(_translate("giris_cikis_tablo", "İşlem Türü"))
        item = self.tableWidget_3.horizontalHeaderItem(4)
        item.setText(_translate("giris_cikis_tablo", "İşlem Ay"))
        item = self.tableWidget_3.horizontalHeaderItem(5)
        item.setText(_translate("giris_cikis_tablo", "İşlem Günü"))
        item = self.tableWidget_3.horizontalHeaderItem(6)
        item.setText(_translate("giris_cikis_tablo", "İşlem Saati"))
        item = self.tableWidget_3.horizontalHeaderItem(7)
        item.setText(_translate("giris_cikis_tablo", "İşlem Dakikası"))
        item = self.tableWidget_3.horizontalHeaderItem(8)
        item.setText(_translate("giris_cikis_tablo", "Plaka Tespit Edilme Türü"))
        self.gunluk_export.setText(_translate("giris_cikis_tablo", "Dışarı Aktar"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_3), _translate("giris_cikis_tablo", "Günlük Giriş/Çıkış Tablosu"))
        item = self.tableWidget_4.horizontalHeaderItem(0)
        item.setText(_translate("giris_cikis_tablo", "Plaka Bilgisi"))
        item = self.tableWidget_4.horizontalHeaderItem(1)
        item.setText(_translate("giris_cikis_tablo", "Dosya Adı"))
        item = self.tableWidget_4.horizontalHeaderItem(2)
        item.setText(_translate("giris_cikis_tablo", "İşlem Türü"))
        item = self.tableWidget_4.horizontalHeaderItem(3)
        item.setText(_translate("giris_cikis_tablo", "İşlem Ay"))
        item = self.tableWidget_4.horizontalHeaderItem(4)
        item.setText(_translate("giris_cikis_tablo", "İşlem Günü"))
        item = self.tableWidget_4.horizontalHeaderItem(5)
        item.setText(_translate("giris_cikis_tablo", "İşlem Saati"))
        item = self.tableWidget_4.horizontalHeaderItem(6)
        item.setText(_translate("giris_cikis_tablo", "İşlem Dakikası"))
        item = self.tableWidget_4.horizontalHeaderItem(7)
        item.setText(_translate("giris_cikis_tablo", "Plaka Tespit Edilme Türü"))
        self.yetkisiz_islem.setText(_translate("giris_cikis_tablo", "Dışarı Aktar"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_4), _translate("giris_cikis_tablo", "Yetkisiz Giriş/Çıkış Tablosu"))
        item = self.tableWidget_5.horizontalHeaderItem(0)
        item.setText(_translate("giris_cikis_tablo", "Plaka Bilgisi"))
        item = self.tableWidget_5.horizontalHeaderItem(1)
        item.setText(_translate("giris_cikis_tablo", "Dosya Adı"))
        item = self.tableWidget_5.horizontalHeaderItem(2)
        item.setText(_translate("giris_cikis_tablo", "İşlem Türü"))
        item = self.tableWidget_5.horizontalHeaderItem(3)
        item.setText(_translate("giris_cikis_tablo", "İşlem Ay"))
        item = self.tableWidget_5.horizontalHeaderItem(4)
        item.setText(_translate("giris_cikis_tablo", "İşlem Günü"))
        item = self.tableWidget_5.horizontalHeaderItem(5)
        item.setText(_translate("giris_cikis_tablo", "İşlem Saati"))
        item = self.tableWidget_5.horizontalHeaderItem(6)
        item.setText(_translate("giris_cikis_tablo", "İşlem Dakikası"))
        self.label.setText(_translate("giris_cikis_tablo", "Kullanıcı ID"))
        self.kullanici_ozel_buton.setText(_translate("giris_cikis_tablo", "Kayıt Bul"))
        self.label_4.setText(_translate("giris_cikis_tablo", "Kayıtsız kullanıcılar için kısa çizgi  \" - \" kullanın."))
        self.veri_export_kullanici.setText(_translate("giris_cikis_tablo", "Dışarı Aktar"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_5), _translate("giris_cikis_tablo", "Kullanıcı Özel Arama"))
        item = self.tableWidget_6.horizontalHeaderItem(0)
        item.setText(_translate("giris_cikis_tablo", "Kullanıcı ID"))
        item = self.tableWidget_6.horizontalHeaderItem(1)
        item.setText(_translate("giris_cikis_tablo", "Dosya Adı"))
        item = self.tableWidget_6.horizontalHeaderItem(2)
        item.setText(_translate("giris_cikis_tablo", "İşlem Türü"))
        item = self.tableWidget_6.horizontalHeaderItem(3)
        item.setText(_translate("giris_cikis_tablo", "İşlem Ay"))
        item = self.tableWidget_6.horizontalHeaderItem(4)
        item.setText(_translate("giris_cikis_tablo", "İşlem Gün"))
        item = self.tableWidget_6.horizontalHeaderItem(5)
        item.setText(_translate("giris_cikis_tablo", "İşlem Saati"))
        item = self.tableWidget_6.horizontalHeaderItem(6)
        item.setText(_translate("giris_cikis_tablo", "İşlem Dakika"))
        self.plaka_ozel_buton.setText(_translate("giris_cikis_tablo", "Kayıt Bul"))
        self.label_8.setText(_translate("giris_cikis_tablo", "Plaka Bilgisi"))
        self.label_11.setText(_translate("giris_cikis_tablo", "<html><head/><body><p>Kayıtsız plakalar için kısa çizgi  &quot; - &quot; kullanın.</p><p>Plaka formatı ise aşağıdaki gibi olmalıdır:</p><p>İL_KODU boşluk HARF boşluk SAYILAR</p></body></html>"))
        self.veri_export_arac.setText(_translate("giris_cikis_tablo", "Dışarı Aktar"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_6), _translate("giris_cikis_tablo", "Araç Özel Arama"))
        item = self.tableWidget_7.horizontalHeaderItem(0)
        item.setText(_translate("giris_cikis_tablo", "Kullanıcı ID"))
        item = self.tableWidget_7.horizontalHeaderItem(1)
        item.setText(_translate("giris_cikis_tablo", "Plaka Bilgisi"))
        item = self.tableWidget_7.horizontalHeaderItem(2)
        item.setText(_translate("giris_cikis_tablo", "Dosya Adı"))
        item = self.tableWidget_7.horizontalHeaderItem(3)
        item.setText(_translate("giris_cikis_tablo", "İşlem Türü"))
        item = self.tableWidget_7.horizontalHeaderItem(4)
        item.setText(_translate("giris_cikis_tablo", "Plaka Tespit Edilme"))
        self.label_10.setText(_translate("giris_cikis_tablo", "Ay"))
        self.label_12.setText(_translate("giris_cikis_tablo", "Gün"))
        self.label_13.setText(_translate("giris_cikis_tablo", "Saat"))
        self.label_14.setText(_translate("giris_cikis_tablo", "Dakika"))
        self.zaman_buton_ozel.setText(_translate("giris_cikis_tablo", "Kayıt Bul"))
        self.label_2.setText(_translate("giris_cikis_tablo", "<html><head/><body><p>Ay ve gün bilgisi girilmesi zorunludur. Saat ve dakika</p><p>bilgisi ise isteğe bağlı olarak girilebilir.</p><p><br/></p></body></html>"))
        self.veri_export_zaman.setText(_translate("giris_cikis_tablo", "Dışarı Aktar"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_7), _translate("giris_cikis_tablo", "Zaman Özel Arama"))

        self.yetkili_arac_getir()
        self.yetkili_kulanici_getir()
        self.gunluk_tablo_getir()
        self.yetkilisiz_arac_getir()

        #özel aramalar
        self.kullanici_ozel_buton.clicked.connect(self.Kullanici_Ozel_Arama)
        self.plaka_ozel_buton.clicked.connect(self.Arac_Plaka_Ozel_Arama)
        self.zaman_buton_ozel.clicked.connect(self.Zaman_Ozel_Arama)

        #dışarı aktarma
        self.kullanici_export.clicked.connect(self.Kullanici_Export)
        self.arac_export.clicked.connect(self.Arac_Export)
        self.gunluk_export.clicked.connect(self.Gunluk_Export)
        self.yetkisiz_islem.clicked.connect(self.Yetkisiz_Export)
        
        #özel dışarı çıkarmalar
        self.veri_export_kullanici.clicked.connect(self.Kullanici_Ozel_Export)
        self.veri_export_arac.clicked.connect(self.Arac_Ozel_Export)
        self.veri_export_zaman.clicked.connect(self.Zaman_Ozel_Export)

    ###############################################################################################################EXPORT
    def Yetkisiz_Export(self):
        try:

            imlec.execute("""  SELECT * FROM yetkisiz_islem_tablo """)
            METİN = imlec.fetchall()
            # Sütun başlıklarını belirtin
            sütun_basliklari = ['PlakaBilgisi', 'DosyaAdi', 'IslemGorevi', 'IslemAyi', 'IslemGunu', 'IslemSaati', 'IslemDakikasi','PlakaTespitEdilme']

            # Pandas DataFrame oluşturma
            df = pd.DataFrame(METİN, columns=sütun_basliklari)
            isim = "YETKISIZ_ISLEM" + str(time.asctime())
            isim_csv = isim + ".csv"
            isim_excel = isim + ".xls"

            # Veriyi Excel'e dışa aktarma
            df.to_csv(isim_csv, index=False)

            # Excel dosyası oluşturma
            workbook = xlwt.Workbook()
            sheet = workbook.add_sheet('Yetkisiz_Islem_Arama')
            for col, baslik in enumerate(sütun_basliklari):
                sheet.write(0, col, baslik)

            # Verileri yazma
            for row, veri in enumerate(METİN):
                for col, deger in enumerate(veri):
                    sheet.write(row+1, col, deger)

            # Excel dosyasını kaydetme
            workbook.save(isim_excel)
        
        except:
            print("Hata 1111111111")


    def Kullanici_Export(self):
        try:

            imlec.execute("""  SELECT * FROM yetkili_kullanici_islem_tablo """)
            METİN = imlec.fetchall()
            # Sütun başlıklarını belirtin
            sütun_basliklari = ['KullaniciID','PlakaBilgisi', 'DosyaAdi', 'IslemGorevi', 'IslemAyi', 'IslemGunu', 'IslemSaati', 'IslemDakikasi']

            # Pandas DataFrame oluşturma
            df = pd.DataFrame(METİN, columns=sütun_basliklari)
            isim = "YETKILI_KULLANICI" + str(time.asctime())
            isim_csv = isim + ".csv"
            isim_excel = isim + ".xls"

            # Veriyi Excel'e dışa aktarma
            df.to_csv(isim_csv, index=False)

            # Excel dosyası oluşturma
            workbook = xlwt.Workbook()
            sheet = workbook.add_sheet('Kullanıcı_Yetkili_Arama')
            for col, baslik in enumerate(sütun_basliklari):
                sheet.write(0, col, baslik)

            # Verileri yazma
            for row, veri in enumerate(METİN):
                for col, deger in enumerate(veri):
                    sheet.write(row+1, col, deger)

            # Excel dosyasını kaydetme
            workbook.save(isim_excel)
        
        except:
            print("Hata 1111111111")

    def Arac_Export(self):
        try:

            imlec.execute("""  SELECT * FROM yetkili_arac_islem_tablo """)
            METİN = imlec.fetchall()
            # Sütun başlıklarını belirtin
            sütun_basliklari = ['PlakaBilgisi', 'DosyaAdi', 'IslemGorevi', 'IslemAyi', 'IslemGunu', 'IslemSaati', 'IslemDakikasi']

            # Pandas DataFrame oluşturma
            df = pd.DataFrame(METİN, columns=sütun_basliklari)
            isim = "YETKILI_ARAC" + str(time.asctime())
            isim_csv = isim + ".csv"
            isim_excel = isim + ".xls"

            # Veriyi Excel'e dışa aktarma
            df.to_csv(isim_csv, index=False)

            # Excel dosyası oluşturma
            workbook = xlwt.Workbook()
            sheet = workbook.add_sheet('Arac_Yetkili_Arama')
            for col, baslik in enumerate(sütun_basliklari):
                sheet.write(0, col, baslik)

            # Verileri yazma
            for row, veri in enumerate(METİN):
                for col, deger in enumerate(veri):
                    sheet.write(row+1, col, deger)

            # Excel dosyasını kaydetme
            workbook.save(isim_excel)
        
        except:
            print("Hata 1111111111")
        

    def Gunluk_Export(self):
        try:

            imlec.execute("""  SELECT * FROM gunluk_islem_tablo """)
            METİN = imlec.fetchall()
            # Sütun başlıklarını belirtin
            sütun_basliklari = ['KullaniciID','PlakaBilgisi', 'DosyaAdi', 'IslemGorevi', 'IslemAyi', 'IslemGunu', 'IslemSaati', 'IslemDakikasi','PlakaTespitEdilme']

            # Pandas DataFrame oluşturma
            df = pd.DataFrame(METİN, columns=sütun_basliklari)
            isim = "GUNLUK" + str(time.asctime())
            isim_csv = isim + ".csv"
            isim_excel = isim + ".xls"

            # Veriyi Excel'e dışa aktarma
            df.to_csv(isim_csv, index=False)

            # Excel dosyası oluşturma
            workbook = xlwt.Workbook()
            sheet = workbook.add_sheet('Gunluk_Arama')
            for col, baslik in enumerate(sütun_basliklari):
                sheet.write(0, col, baslik)

            # Verileri yazma
            for row, veri in enumerate(METİN):
                for col, deger in enumerate(veri):
                    sheet.write(row+1, col, deger)

            # Excel dosyasını kaydetme
            workbook.save(isim_excel)
        
        except:
            print("Hata 1111111111")
    ###############################################################################################################EXPORT



    ###############################################################################################################EXPORT OZEL
    def Kullanici_Ozel_Export(self):
        print(len(str(self.kullanici_ozel_id.text())))
        try:
            if self.kullanici_ozel_id.text() != "" or self.kullanici_ozel_id.text() == " " or len(str(self.kullanici_ozel_id.text())) >= 1:
                print("Kullanici İşlem Başladi")
                imlec.execute("SELECT plaka, dosya_adi, islem_gorevi,islem_ay,islem_gun,islem_saat,islem_dakika FROM gunluk_islem_tablo WHERE kullanici_ID=?",(str(self.kullanici_ozel_id.text()),))
                METİN = imlec.fetchall()
                
                # Sütun başlıklarını belirtin
                sütun_basliklari = ['PlakaBilgisi', 'DosyaAdi','IslemGorevi', 'IslemAyi', 'IslemGunu', 'IslemSaati', 'IslemDakikasi']

                # Pandas DataFrame oluşturma
                df = pd.DataFrame(METİN, columns=sütun_basliklari)
                isim = "OZEL_KULLANICI" + str(time.asctime())
                isim_csv = isim + ".csv"
                isim_excel = isim + ".xls"

                # Veriyi Excel'e dışa aktarma
                df.to_csv(isim_csv, index=False)

                # Excel dosyası oluşturma
                workbook = xlwt.Workbook()
                sheet = workbook.add_sheet('Kullanıcı_Ozel_Arama')
                for col, baslik in enumerate(sütun_basliklari):
                    sheet.write(0, col, baslik)

                # Verileri yazma
                for row, veri in enumerate(METİN):
                    for col, deger in enumerate(veri):
                        sheet.write(row+1, col, deger)

                # Excel dosyasını kaydetme
                workbook.save(isim_excel)
        except:
            print("Hata 473")


    def Arac_Ozel_Export(self):
        print(len(str(self.kullanici_ozel_id.text())))
        try:
            if self.plaka_ozel.text() != "" or self.plaka_ozel.text() == " " or len(str(self.plaka_ozel.text())) > 1:
                print("Araç İşlem Başladi")
                imlec.execute("SELECT kullanici_ID, dosya_adi, islem_gorevi,islem_ay,islem_gun,islem_saat,islem_dakika,plaka_tespit_edilme FROM gunluk_islem_tablo WHERE plaka=?",(str(self.plaka_ozel.text()),))
                METİN = imlec.fetchall()
                # Sütun başlıklarını belirtin
                sütun_basliklari = ['KullaniciID', 'DosyaAdi', 'IslemGorevi', 'IslemAyi', 'IslemGunu', 'IslemSaati', 'IslemDakikasi', 'Plaka_Tespit_Edilme']

                # Pandas DataFrame oluşturma
                df = pd.DataFrame(METİN, columns=sütun_basliklari)
                isim = "OZEL_ARAC"+str(time.asctime())
                isim_csv = isim + ".csv"
                isim_excel = isim + ".xls"

                # Veriyi Excel'e dışa aktarma
                df.to_csv(isim_csv, index=False)

                # Excel dosyası oluşturma
                workbook = xlwt.Workbook()
                sheet = workbook.add_sheet('Arac_Ozel_Arama')
                for col, baslik in enumerate(sütun_basliklari):
                    sheet.write(0, col, baslik)

                # Verileri yazma
                for row, veri in enumerate(METİN):
                    for col, deger in enumerate(veri):
                        sheet.write(row+1, col, deger)

                # Excel dosyasını kaydetme
                workbook.save(isim_excel)
        except:
            print("Hata 473")

    def Zaman_Ozel_Export(self):
        try:
            #ilk once ay ve gun girili olup olmmadığını sor, girili ise işlem yap.
            #eğer ay, gun ve saat girili ise ayrı işlem yap
            #eğer ay, gun, saat ve dakika girili ise ayrı işlem yap
            print(type(self.zaman_ay_ozel.text()))
            print(self.zaman_ay_ozel.text())


            #buraları el ile değil for ve str ile doldur
            aylar = []
            for i in range(1,13) :
                aylar.append(str(i))

            #print(aylar)

            gunler = []
            for i in range(1,32) :
                gunler.append(str(i))

            #print(gunler)

            saatler = []
            for i in range(1,25):
                saatler.append(str(i))

            #print(saatler)

            dakikalar = []
            for i in range(1,61):
                dakikalar.append(str(i))
            #print(dakikalar)

            # Sütun başlıklarını belirtin
            sütun_basliklari = ['KullaniciID','PlakaBilgisi', 'DosyaAdi', 'IslemGorevi', 'PlakaTespitEdilme']
            
            
            if str(self.zaman_ay_ozel.text()) in aylar and str(self.zaman_gun_ozel.text()) in gunler:
                if str(self.zaman_saat_ozel.text()) =="" and str(self.zaman_dakika_ozel.text())=="":
                    print(11111111111111)
                    try:
                        imlec.execute("SELECT kullanici_ID, plaka, dosya_adi, islem_gorevi, plaka_tespit_edilme FROM gunluk_islem_tablo WHERE islem_ay=? AND islem_gun=?", (self.zaman_ay_ozel.text(), self.zaman_gun_ozel.text()))
                        METİN = imlec.fetchall()
                        
                        # Pandas DataFrame oluşturma
                        df = pd.DataFrame(METİN, columns=sütun_basliklari)
                        isim = "OZEL_ZAMAN"+str(time.asctime())
                        isim_csv = isim + ".csv"
                        isim_excel = isim + ".xls"

                        # Veriyi Excel'e dışa aktarma
                        df.to_csv(isim_csv, index=False)

                        # Excel dosyası oluşturma
                        workbook = xlwt.Workbook()
                        sheet = workbook.add_sheet('Zaman_Ozel_Arama')
                        for col, baslik in enumerate(sütun_basliklari):
                            sheet.write(0, col, baslik)

                        # Verileri yazma
                        for row, veri in enumerate(METİN):
                            for col, deger in enumerate(veri):
                                sheet.write(row+1, col, deger)

                        # Excel dosyasını kaydetme
                        workbook.save(isim_excel)

                    except:
                        print("Hata 547")
                elif str(self.zaman_saat_ozel.text()) != "" and str(self.zaman_dakika_ozel.text())=="":
                    print(2222222222222)
                    try:
                        imlec.execute("SELECT kullanici_ID, plaka, dosya_adi, islem_gorevi, plaka_tespit_edilme FROM gunluk_islem_tablo WHERE islem_ay=? AND islem_gun=? AND islem_saat=?", (self.zaman_ay_ozel.text(), self.zaman_gun_ozel.text(),self.zaman_saat_ozel.text()))
                        METİN = imlec.fetchall()
                                                
                        # Pandas DataFrame oluşturma
                        df = pd.DataFrame(METİN, columns=sütun_basliklari)
                        isim = "OZEL_ZAMAN"+str(time.asctime())
                        isim_csv = isim + ".csv"
                        isim_excel = isim + ".xls"

                        # Veriyi Excel'e dışa aktarma
                        df.to_csv(isim_csv, index=False)

                        # Excel dosyası oluşturma
                        workbook = xlwt.Workbook()
                        sheet = workbook.add_sheet('Zaman_Ozel_Arama')
                        for col, baslik in enumerate(sütun_basliklari):
                            sheet.write(0, col, baslik)

                        # Verileri yazma
                        for row, veri in enumerate(METİN):
                            for col, deger in enumerate(veri):
                                sheet.write(row+1, col, deger)

                        # Excel dosyasını kaydetme
                        workbook.save(isim_excel)

                    except:
                        print("Hata 560")
                elif str(self.zaman_saat_ozel.text()) !="" and str(self.zaman_dakika_ozel.text())!="":
                    print(333333333)
                    try:
                        imlec.execute("SELECT kullanici_ID, plaka, dosya_adi, islem_gorevi, plaka_tespit_edilme FROM gunluk_islem_tablo WHERE islem_ay=? AND islem_gun=? AND islem_saat=? AND islem_dakika=?", (self.zaman_ay_ozel.text(), self.zaman_gun_ozel.text(),self.zaman_saat_ozel.text(),self.zaman_dakika_ozel.text()))
                        METİN = imlec.fetchall()
                                                
                        # Pandas DataFrame oluşturma
                        df = pd.DataFrame(METİN, columns=sütun_basliklari)
                        isim = "OZEL_ZAMAN"+str(time.asctime())
                        isim_csv = isim + ".csv"
                        isim_excel = isim + ".xls"

                        # Veriyi Excel'e dışa aktarma
                        df.to_csv(isim_csv, index=False)

                        # Excel dosyası oluşturma
                        workbook = xlwt.Workbook()
                        sheet = workbook.add_sheet('Zaman_Ozel_Arama')
                        for col, baslik in enumerate(sütun_basliklari):
                            sheet.write(0, col, baslik)

                        # Verileri yazma
                        for row, veri in enumerate(METİN):
                            for col, deger in enumerate(veri):
                                sheet.write(row+1, col, deger)

                        # Excel dosyasını kaydetme
                        workbook.save(isim_excel)

                    except:
                        print("Hata 573")
                elif str(self.zaman_saat_ozel.text()) =="" and str(self.zaman_dakika_ozel.text())!="":
                    print("444444444444444444444444444")
                    try:
                        imlec.execute("SELECT kullanici_ID, plaka, dosya_adi, islem_gorevi, plaka_tespit_edilme FROM gunluk_islem_tablo WHERE islem_ay=? AND islem_gun=? AND islem_dakika=?", (self.zaman_ay_ozel.text(), self.zaman_gun_ozel.text(),self.zaman_dakika_ozel.text()))
                        METİN = imlec.fetchall()
                                                
                        # Pandas DataFrame oluşturma
                        df = pd.DataFrame(METİN, columns=sütun_basliklari)
                        isim = "OZEl_ZAMAN"+str(time.asctime())
                        isim_csv = isim + ".csv"
                        isim_excel = isim + ".xls"

                        # Veriyi Excel'e dışa aktarma
                        df.to_csv(isim_csv, index=False)

                        # Excel dosyası oluşturma
                        workbook = xlwt.Workbook()
                        sheet = workbook.add_sheet('Zaman_Ozel_Arama')
                        for col, baslik in enumerate(sütun_basliklari):
                            sheet.write(0, col, baslik)

                        # Verileri yazma
                        for row, veri in enumerate(METİN):
                            for col, deger in enumerate(veri):
                                sheet.write(row+1, col, deger)

                        # Excel dosyasını kaydetme
                        workbook.save(isim_excel)

                    except:
                        print("Hata 573")
            else:
                print("Ay ve Gun yaz")
                
        except:
            print("Hata 516")
    ###############################################################################################################EXPORT OZEL

    def Kullanici_Ozel_Arama(self):
        print(len(str(self.kullanici_ozel_id.text())))
        try:
            if self.kullanici_ozel_id.text() != "" or self.kullanici_ozel_id.text() == " " or len(str(self.kullanici_ozel_id.text())) >= 1:
                print("Kullanici İşlem Başladi")
                imlec.execute("SELECT plaka, dosya_adi, islem_gorevi,islem_ay,islem_gun,islem_saat,islem_dakika,plaka_tespit_edilme FROM gunluk_islem_tablo WHERE kullanici_ID=?",(str(self.kullanici_ozel_id.text()),))
                METİN = imlec.fetchall()
                # Tabloyu temizleme
                self.tableWidget_5.clearContents()
                self.tableWidget_5.setRowCount(0)
                for row, veri in enumerate(METİN):
                    #print(veri)
                    self.tableWidget_5.insertRow(row)
                    for col, deger in enumerate(veri):
                        item = QtWidgets.QTableWidgetItem(deger)
                        self.tableWidget_5.setItem(row, col, item)
            
        except:
            print("Hata 473")

    def Arac_Plaka_Ozel_Arama(self):
        try:
            if self.plaka_ozel.text() != "" or self.plaka_ozel.text() == " " or len(str(self.plaka_ozel.text())) > 1:
                print("Araç Plaka İşlem Başladi")
                imlec.execute("SELECT kullanici_ID, dosya_adi, islem_gorevi,islem_ay,islem_gun,islem_saat,islem_dakika,plaka_tespit_edilme FROM gunluk_islem_tablo WHERE plaka=?",(str(self.plaka_ozel.text()),))
                METİN = imlec.fetchall()
                # Tabloyu temizleme
                self.tableWidget_6.clearContents()
                self.tableWidget_6.setRowCount(0)
                for row, veri in enumerate(METİN):
                    #print(veri)
                    self.tableWidget_6.insertRow(row)
                    for col, deger in enumerate(veri):
                        item = QtWidgets.QTableWidgetItem(deger)
                        self.tableWidget_6.setItem(row, col, item)
        except:
            print("Hata 495")
        
    def Zaman_Ozel_Arama(self):
        try:
            #ilk once ay ve gun girili olup olmmadığını sor, girili ise işlem yap.
            #eğer ay, gun ve saat girili ise ayrı işlem yap
            #eğer ay, gun, saat ve dakika girili ise ayrı işlem yap
            print(type(self.zaman_ay_ozel.text()))
            print(self.zaman_ay_ozel.text())

            self.tableWidget_7.clearContents()
            self.tableWidget_7.setRowCount(0)

            #buraları el ile değil for ve str ile doldur
            aylar = []
            for i in range(1,13) :
                aylar.append(str(i))

            #print(aylar)

            gunler = []
            for i in range(1,32) :
                gunler.append(str(i))

            #print(gunler)

            saatler = []
            for i in range(1,25):
                saatler.append(str(i))

            #print(saatler)

            dakikalar = []
            for i in range(1,61):
                dakikalar.append(str(i))
            #print(dakikalar)
            
            
            if str(self.zaman_ay_ozel.text()) in aylar and str(self.zaman_gun_ozel.text()) in gunler:
                if str(self.zaman_saat_ozel.text()) =="" and str(self.zaman_dakika_ozel.text())=="":
                    print(11111111111111)
                    try:
                        imlec.execute("SELECT kullanici_ID, plaka, dosya_adi, islem_gorevi, plaka_tespit_edilme FROM gunluk_islem_tablo WHERE islem_ay=? AND islem_gun=?", (self.zaman_ay_ozel.text(), self.zaman_gun_ozel.text()))
                        METİN = imlec.fetchall()
                        for row, veri in enumerate(METİN):
                            #print(veri)
                            self.tableWidget_7.insertRow(row)
                            for col, deger in enumerate(veri):
                                item = QtWidgets.QTableWidgetItem(deger)
                                self.tableWidget_7.setItem(row, col, item)
                    except:
                        print("Hata 547")
                elif str(self.zaman_saat_ozel.text()) != "" and str(self.zaman_dakika_ozel.text())=="":
                    print(2222222222222)
                    try:
                        imlec.execute("SELECT kullanici_ID, plaka, dosya_adi, islem_gorevi, plaka_tespit_edilme FROM gunluk_islem_tablo WHERE islem_ay=? AND islem_gun=? AND islem_saat=?", (self.zaman_ay_ozel.text(), self.zaman_gun_ozel.text(),self.zaman_saat_ozel.text()))
                        METİN = imlec.fetchall()
                        for row, veri in enumerate(METİN):
                            #print(veri)
                            self.tableWidget_7.insertRow(row)
                            for col, deger in enumerate(veri):
                                item = QtWidgets.QTableWidgetItem(deger)
                                self.tableWidget_7.setItem(row, col, item)
                    except:
                        print("Hata 560")
                elif str(self.zaman_saat_ozel.text()) !="" and str(self.zaman_dakika_ozel.text())!="":
                    print(333333333)
                    try:
                        imlec.execute("SELECT kullanici_ID, plaka, dosya_adi, islem_gorevi, plaka_tespit_edilme FROM gunluk_islem_tablo WHERE islem_ay=? AND islem_gun=? AND islem_saat=? AND islem_dakika=?", (self.zaman_ay_ozel.text(), self.zaman_gun_ozel.text(),self.zaman_saat_ozel.text(),self.zaman_dakika_ozel.text()))
                        METİN = imlec.fetchall()
                        for row, veri in enumerate(METİN):
                            #print(veri)
                            self.tableWidget_7.insertRow(row)
                            for col, deger in enumerate(veri):
                                item = QtWidgets.QTableWidgetItem(deger)
                                self.tableWidget_7.setItem(row, col, item)
                    except:
                        print("Hata 573")
                elif str(self.zaman_saat_ozel.text()) =="" and str(self.zaman_dakika_ozel.text())!="":
                    print("444444444444444444444444444")
                    try:
                        imlec.execute("SELECT kullanici_ID, plaka, dosya_adi, islem_gorevi, plaka_tespit_edilme FROM gunluk_islem_tablo WHERE islem_ay=? AND islem_gun=? AND islem_dakika=?", (self.zaman_ay_ozel.text(), self.zaman_gun_ozel.text(),self.zaman_dakika_ozel.text()))
                        METİN = imlec.fetchall()
                        for row, veri in enumerate(METİN):
                            #print(veri)
                            self.tableWidget_7.insertRow(row)
                            for col, deger in enumerate(veri):
                                item = QtWidgets.QTableWidgetItem(deger)
                                self.tableWidget_7.setItem(row, col, item)
                    except:
                        print("Hata 573")
            else:
                print("Ay ve Gun yaz")
                
        except:
            print("Hata 516")

    def yetkili_arac_getir(self):
        imlec.execute("""  SELECT * FROM yetkili_arac_islem_tablo """)
        METİN = imlec.fetchall()
        """print(METİN)
        print(METİN[0])
        print(type(METİN))
        print(type(METİN[0]))
        print(METİN[0][0])
        print(type(METİN[0][0]))"""


        for row, veri in enumerate(METİN):
            #print(veri)
            self.tableWidget.insertRow(row)
            for col, deger in enumerate(veri):
                item = QtWidgets.QTableWidgetItem(deger)
                self.tableWidget.setItem(row, col, item)

    def yetkili_kulanici_getir(self):
        imlec.execute("""  SELECT * FROM yetkili_kullanici_islem_tablo """)
        METİN = imlec.fetchall()
        """print(METİN)
        print(METİN[0])
        print(type(METİN))
        print(type(METİN[0]))
        print(METİN[0][0])
        print(type(METİN[0][0]))"""


        for row, veri in enumerate(METİN):
            #print(veri)
            self.tableWidget_2.insertRow(row)
            for col, deger in enumerate(veri):
                item = QtWidgets.QTableWidgetItem(deger)
                self.tableWidget_2.setItem(row, col, item)

    def gunluk_tablo_getir(self):
        imlec.execute("""  SELECT * FROM gunluk_islem_tablo """)
        METİN = imlec.fetchall()
        """print(METİN)
        print(METİN[0])
        print(type(METİN))
        print(type(METİN[0]))
        print(METİN[0][0])
        print(type(METİN[0][0]))"""


        for row, veri in enumerate(METİN):
            #print(veri)
            self.tableWidget_3.insertRow(row)
            for col, deger in enumerate(veri):
                item = QtWidgets.QTableWidgetItem(deger)
                self.tableWidget_3.setItem(row, col, item)

    def yetkilisiz_arac_getir(self):
        imlec.execute("""  SELECT * FROM yetkisiz_islem_tablo """)
        METİN = imlec.fetchall()
        """print(METİN)
        print(METİN[0])
        print(type(METİN))
        print(type(METİN[0]))
        print(METİN[0][0])
        print(type(METİN[0][0]))"""


        for row, veri in enumerate(METİN):
            #print(veri)
            self.tableWidget_4.insertRow(row)
            for col, deger in enumerate(veri):
                item = QtWidgets.QTableWidgetItem(deger)
                self.tableWidget_4.setItem(row, col, item)




if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    giris_cikis_tablo = QtWidgets.QMainWindow()
    ui = Ui_giris_cikis_tablo()
    ui.setupUi(giris_cikis_tablo)
    giris_cikis_tablo.show()
    sys.exit(app.exec_())
